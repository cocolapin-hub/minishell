
//main de coo :


#include "minishell.h"

int main(int argc, char **argv, char **envp)
{
    t_shell 	all;
    t_command 	*cmd_list = NULL;
    char 		*line;

    (void)argc;
    (void)argv;

	//setup_shell(&all, envp)
    all.env = init_env(envp);  			//<--initialise shell ici, a ajuster
    all.last_status = 0;
    setup_sig();

    while (1)
    {
        line = readline("minishell$ ");
		if (!line)
		{
			if (g_in_heredoc == SIGINT)
			{
				g_in_heredoc = 0;
				continue ;
			}
			printf("exit\n");
			exit_clean_af(&all, cmd_list, all.last_status);
		}
		if (line[0] != '\0')
			add_history(line);


        cmd_list = parsing(line, &all);
//      free(line);						// <-------------handle free later

        if (!cmd_list)
            continue ;

        // Exécution

        if (cmd_list->next) // il y a un pipe
            exec_pipe(cmd_list, &all);
        else
            run_command(cmd_list);

        free_command(cmd_list);			// <--------------handle free later
        cmd_list = NULL;
    }

 //   clear_history();
 //   free_env(all.env);
    return (0);
}




//main de omar:

void	free_all(t_shell *all)
{
    t_local *tmp;

    if (!all)
        return;

    // Libérer chaque maillon de la liste env
    while (all->env)
    {
        tmp = all->env->next;
        if (all->env->key)
            free(all->env->key);
        if (all->env->value)
            free(all->env->value);
        free(all->env);
        all->env = tmp;
    }

    // Libérer la structure shell elle-même
    free(all);
}

int 	main(int argc, char **argv, char **envp)
{
	t_command 	*old_cmd = NULL;
	t_command	*cmd = NULL;
	t_shell		*all = NULL;
	char 		*line;

	(void)line;
	(void)argc;
	(void)argv;
	(void)cmd;

	setup_signal();
	setup_shell(&all, envp);

    while (1)
    {
		line = readline("minishell$ ");
		if (!line)
			end_code(cmd);

		/*parsing*/
		if (*line)
		{
			old_cmd = cmd;
			cmd = parsing(line, all);
			if(old_cmd)
				end_code(old_cmd);
		}

		free(line);

		/*executable*/
		// if (strlen(line) != 0 && line != NULL)
		// 	exec(cmd);



		//printf("You typed: %s\n", line);

    }

	free_all(all);
//	end_code(cmd);
    return 0;
}







// void executor(t_command *cmd_list, t_SHELL *all)
// {
//     if (!cmd_list)
//         return;
//     if (cmd_list->next)
//         exec_pipe(cmd_list, all);
//     else
//         run_command(cmd_list);
// }








char	*exit_handling(char *line)
{
	/*Exit simple*/

	char	**exit_line;
	int		len;

	exit_line = ft_split(line, ' ');
	len = ft_count_strings(exit_line);

	if (ft_strcmp(exit_line[0], "exit") == 0)
	{
		//simple exit cmd if only exit or exit + number (ends code)
		if (exit_line[1] == 0 || (ft_isnumber(exit_line[1]) && len == 2))
		{
			free(line);
			write(1, "exit\n", 5);
			exit (1);
			//end_code(cmd);
		}

		//exit followed with a non numerical value (ends code)
		if (!ft_isnumber(exit_line[1]))
		{
			free(line);
			write(1, "exit\n", 5);
			write(1, "exit: ", 6);
			write(1, exit_line[1], ft_strlen(exit_line[1]));
			write(1, ": numeric argument required\n", 28);
			exit (1);
			//end_code(cmd);
		}

		//too many arguments apres exit (wont end code)
		if (len > 2)
		{
			free(line);
			write(1, "exit\n", 5);
			write(1, "exit: too many arguments\n", 25);
			return NULL;
		}
	}

	return line;
}