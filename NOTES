EXEMPLE avec expansion :	echo $HOME > $FILE

PARSING :					cmd->args = {"echo", "/home/claffut", NULL};
							cmd->elem (redir) = {type=REDIR_OUT, value="out.txt"};


CAS PARTICULIERS :

V	echo $ et "$"	:	affiche $ (parsing doit check si c'est avec echo ?)

V	echo "$BICHE"	:	affiche "" (chaine vide, pas supprimée car entre quotes) ( " = expans activée | ' = expans désactivée )

V	PATH= "a b c"
V	echo  $PATH		:	 a b c	(3 arguments)
V	echo "$PATH"	:	"a b c"	(1 argument)

V	cat << 	EOF
V	$USER			:	affiche claffut
	EOF

V	cat << 'EOF'
V	$USER			:	affiche $USER
v	EOF

x	FILE="out.txt"
x	echo coucou > $FILE		:	écrit dans out.txt

x	lol > $26CM		:	affiche ->	bash: $26CM: ambigous redirect

V	/bin/cd			:	bash: /bin/cd: No such file or directory
V	/bin/ls mdr		:	/bin/ls: cannot access 'mdr': No such file or directory ($? = 2)



V	exit lol		:	exit
						bash: exit: lol: numeric argument required ($? = 2)
V	exit 19			: 	suivi d'un echo $? donne : last_status = 19
V	exit long		:	bash: exit: 55555555555555555555555555555555555555555555555555555555: numeric argument required

V	$? / $?			:	0: command not found

V	CTRL-C			:	^C + nouvelle ligne avec nouveau prompt

V	CTRL-D			:	apres avoir écrit quelque chose : ne fait rien.		sinon quitte minishell

	cat (sans arg)
V	ctrl-c			:	interrompt la commande bloquante + ^C 					+ new prompt
V	ctrl-\			:	interrompt la commande bloquante + ^\Quit (core dumped) + new prompt
V	ctrl-d			:	interrompt la commande bloquante + new prompt (sans quitter minishell)

V	ls  "src/"		:	marche
v	ls '"src/"'		:	ls: cannot access '"src/"': No such file or directory

V	$ cat > | ls	:	bash: syntax error near unexpected token `|' 	(la parsing devrait donner un token REDIR_OUT null : redir->value == NULL)
V	$ cat >			: 	syntax error near unexpected token `newline'

V	minishell$ cat -e << eof
		> asdfasdf
		> asdfasdf
		> ^C
					:	minishell: heredoc: failed
					:	redirection: Bad file descriptor
					:	add echo $? 130 instead of 1

?	Message d erreur qui commence par bash: (exit ou > sans rien)


// //TO_DO :	// remove leaks
// 			// change le parsing cote cmd --> verifier que ca marche
// 			// handle quote the new way, discuss it with coco
// 			// regroup work

// // OPTI	:	//merge both ft_lstadd_back_cmd and ft_lstadd_back
// 			//merge both ft_lstlast_cmd and ft_lstlast

// // leaks:	//free cmd dans tokenisation?
// 			//leaks dans expansion corrige?





minishell$ !	“bash: !: event not found”										 → 		juste une erreur simple : minishell: syntax error
minishell$ :	fait rien (builtin : de bash, pas à gérer)						 → 		“minishell: command not found: :”
minishell$ &	lance en background (pas demandé)								 →		 “minishell: syntax error”
minishell$ ;	sépare deux commandes											 →		“minishell: syntax error”
minishell$ echo \n		interprète \ comme échappement ❌ tu n’as pas à gérer \	→		donc laisse “\n” tel quel
minishell$ echo lol && echo ok 				exécution conditionnelle			 → 		“minishell: syntax error”

RESUME : \ ; & ! () {} [] * ? :	❌ Non
Affiche “syntax error” ou “command not found”


NEW:
			V	: que des espaces
			V	: !
			V	: :
			V	: <> new line syntax error near unexpected token `newline'
			V	: & - &&&&&   syntax error near unexpected token `&' or `&&'
			V	: ; - ;;;;    syntax error near unexpected token `;' or `;;'
			V	: () [] {}
			V	: / - ////////// - /././. - /.
			V	: syntax error -----> $?


		NON GERE: echo      \n hola - \\ \\ - \\\\\\\\\\\	Attention : dans les heredocs non-quoted, Bash désactive linterprétation de \
			V	: ""''echo hola""'''' que""'' tal""''
		NON GERE: echo \$HOME
			V	: echo $PATH	(syntax error ?????)
		NON GERE: echo \$HOME
			V	: echo $HOME9 OK ---->  echo $9HOME / $0HOME /
		NON GERE: echo $USER$var\$USER$USER\$USERtest$USER
		NON GERE: echo $hola*
			V	: echo $""
			V	: echo $''HOME
			V	: echo "$HO"ME      --> pk je quitte minishell
			V	: echo ""$HOME - echo ''$HOME
			V	: echo "" $HOME - echo '' $HOME
			V	: echo $"HO""ME"
			V	: echo $ - echo $$ - echo $$$ - echo $$$$
			V	: echo $DONTEXIST Hola --> rajoute un espace quand variable est vide
			V	: echo ''hola''
			V	: echo "'"h'o'la"'" -->quitte minishell
			V	: "" echo "" hola"""""""""""" ""
			V	: echo ""hola -->ferme le terminal
			V	: echo hola""bonjour
			V	: "e"'c'ho 'b'"o"nj"o"'u'r
			V	: ""e"'c'ho 'b'"o"nj"o"'u'r"
			V	: echo "$DONTEXIST"Makefile
			V	: $HOME
			V	: $HOMEdskjhfkdshfsd
			V	: "$HOMEdskjhfkdshfsd"
				: $DONTEXIST	(retour a la ligne normalement)
				: $LESS$VAR
				: . --> permission denied
				: unset PATH --> ls --> ls: No such file or directory
--> ligne 211
				: cat | rev (ctrl-C apres quelques enter)
				: CTRL-Z (sans rien) ???? suspended
--> ligne 231
				: export $OMG (variable inexistante) censé ouvrir export
		NON GERE: export ho!la=looooooool	(! = event)
		NON GERE: export ZOZO+=mdr			(pas géré)
		NON GERE: exportHOLA=comova			(pas geré)
		NON GERE: export HOLA=bon;jour		(pas géré sauf si entre guillemets ="bon;jour" ) ???
		NON GERE: export HOLA=bon!jour		(pas géré 	="bon!jour" marche pas dans bash)
			v	: export "HOLA=bonjour"=casse-toi
				: export $lol=lol	(segfault apres export lol) doit faire : bash: export: `=lol': not a valid identifier
				: export HOLA="    lol     mdr      "	(bash ne réduit pas les espaces à 1 dans export)
			v	: export HOLA="   -n bonjour   "		(marche mais les espaces sont réduit)
			v	: export HOLA="bonjour   "/				(marche mais les espaces sont réduit)
				: export HOLA="  bonjour  hey  " --> echo $HOLA | cat -e			(bash enleve les espaces en trop lorsqu'il récupere la value d'un $)
				: export HOLA="  bonjour  hey  " --> echo """$HOLA""" | cat -e 		(bash garde les espaces)
			v	: export HOLA="s -la"  --> l$HOLA	(execute ls -la)
			v	: export HOLA="l" --> "$HOLA"s		(crash "")
			v	: export A=1 B=2 C=3 D=4 E=5 F=6 G=7 H=8 --> echo "$A'$B"'$C"$D'$E'"$F'"'$G'$H"
				: la variable _= (réservée a bash n'est pas censée etre dans la liste d'export ???????????)
--> ligne 333				
				: unset PATH --> ls		(ls: no such file or directory)
				: pwd --> unset PWD --> env | grep PWD --> cd $PWD --> pwd
				: unset HOL?A	(not a valid identifier et non pas syntax error)
				: unset hol?a hol.a		(pas de message d'erreur dans bash ??)
				: unset hol\\\a		(non géré)
				: /bin/echo		 (Is a directory ??)
				: cd bite cul	(too many arguments et non no such file)
				: cd loool		(cd: loool: No such file or directory)	bien dire cd: *file*: No such file...
				: cd Makefile	(Makefile : not a directory)
				: cd .././../.././../bin/ls		(cd: .././../.././../bin/ls: Not a directory)
				: cd // --> pwd = //	(non gere)
				: cd /minishell		(no such file or)
				: cd - 	(affiche le /HOME ????)
				: cd -- (fait rien ??) non géré
				: cd ~ (et cd ~/  echo $? = 0)		(retourne à HOME)
				: unset HOME --> export HOME= --> cd	 (censé marcher meme si HOME n'est pas set ????)
--> ligne 444	:
				: mkdir lol -- > mkdir lol/mdr --> cd lol/mdr --> rm -r ../../lol --> cd ..		(cd: error retrieving curr) (pwd: lol/b/..)
				: mkdir lol -- > mkdir lol/mdr --> cd lol/mdr --> rm -r ../../lol --> PWD = minishell/lol/mdr	OLDPWD = minishell/
				: ./Makefile	(permission denied et non Is a directory)
				: touch hola --> ./hola		(permision denied et non Is a directory)
				: env -i ./minishell	(ne copie pas l'env pour minishell donc env, export, cd ne fonctionnent plus)
				: exit 0  /  +0	/ -0	(quitte mais affiche error numeric argument)
				: exit 9223372036854775807  : quitte sans message   MAIS	exit 9223372036854775808 (+1) quitte avec message Numeric argument
				: exit -9223372036854775808	: pareil
				: cat | ls	--> Ctrl-c 		(affiche mal le ^C) run_command ok mais pas exec_pipe
				: ls | exit		(nouveau prompt sans quitter ni écrire exit)
				: exit | ls		(affiche ls sans quitter ni écrire exit)
				: sleep 3 | exit	(attend 3 sans quitter ni écrire exit) same a l'envers
				: echo hola > bonjour	-->  cat -e bonjour | exit		(nouveau prompt sans rien écrire)
				: echo hola > bonjour	-->  exit | cat -e bonjour		(ecrit : hola$ + nouveau prompt)
				: ifconfig | grep ":"	(affiche docker0: flags=4099<UP,...)	on doit vraiment gérer cette merde ???
				: echo bite || cat		(non géré)
				: time sleep 3 | sleep 3	(affiche real	0m3.002s	user 0m0.002s	sys 0m0.000s	genre pk c'est différent wesh
--> ligne 639
				: echo hola >>> bonjour		(unexpected token `>') wrong error
				: cat >>>		unexpeted token >>	wrong errror
				: cat >> << 						wrong error
				: cat >> > >> << >>					wrong error
				: < pwd		double erreur avec redirection
				: cat < pwd	double erreur redir
				: < Makefile .		permission denied		alors que bash : .: not enough arg	(non géré)
				: cat << hola --> $HOME	,	hola	(doit afficher le HOME a la fermeture du heredoc)
				: cat << ho"la"		quand il y a des guillemets dans le EOF de heredoc, l'expansion ne sera pas prise ne compte
				: cat << $HOME		--> Pas de lecture d'expansion a l'interieur de heredoc
				: cat << hola | rev			ca part en couille mdr mais ca marche a moitié
				: cat << prout << lol << koala	--> ferme heredoc si on ecrit dans l'ordre prout, lol, koala. (ecrit les mots qui ne sont pas EOF et ajoute )
				: ATTENTION : Les lignes écritent dans heredoc sont ajoutées a l'historique !!!
				: << $hola		Ambiguous redirect ??
				: << $"hola"$"b"	minishell essaye de lire l'expansion mais doit l'ignorer
				: echo hola <<< bonjour 			doit juste retourner hola
				: echo hola <<<< ou <<<<< bonjour 			unexpted token '<'	ou	'<<'
